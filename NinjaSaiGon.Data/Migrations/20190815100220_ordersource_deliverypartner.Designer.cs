// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NinjaSaiGon.Data;

namespace NinjaSaiGon.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190815100220_ordersource_deliverypartner")]
    partial class ordersource_deliverypartner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyBusinessId");

                    b.Property<int?>("AgencyGroupId");

                    b.Property<int>("AgencyType");

                    b.Property<string>("BusinessRegNumber");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TaxCode");

                    b.Property<string>("TradingName");

                    b.HasKey("Id");

                    b.HasIndex("AgencyBusinessId");

                    b.HasIndex("AgencyGroupId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNumber");

                    b.Property<int>("AgencyId");

                    b.Property<int?>("BankAccountTypeId");

                    b.Property<string>("BankBranch");

                    b.Property<string>("BankName");

                    b.Property<string>("SwiftCode");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("BankAccountTypeId");

                    b.ToTable("AgencyBanks");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyBankCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyBankId");

                    b.Property<int?>("BankCardTypeId");

                    b.Property<string>("CardNumber");

                    b.Property<string>("ExpiredDate");

                    b.HasKey("Id");

                    b.HasIndex("AgencyBankId");

                    b.HasIndex("BankCardTypeId");

                    b.ToTable("AgencyBankCards");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyBusiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AgencyBusinesses");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyCare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AgencyCares");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyContactInfoId");

                    b.Property<int?>("DistrictPlaceId");

                    b.Property<DateTime?>("From");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("MoreInfo");

                    b.Property<int?>("NationalityId");

                    b.Property<int?>("ProvinceId");

                    b.Property<DateTime?>("To");

                    b.Property<int?>("TypeId");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyContactInfoId");

                    b.HasIndex("DistrictPlaceId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WardId");

                    b.ToTable("AgencyContactAddresses");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyContactInfoId");

                    b.Property<string>("Email");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("AgencyContactEmails");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactInfo", b =>
                {
                    b.Property<int>("Id");

                    b.HasKey("Id");

                    b.ToTable("AgencyContactInfos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactOtt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account");

                    b.Property<int>("AgencyContactInfoId");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("AgencyContactOTTs");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyContactInfoId");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("AgencyContactPhones");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account");

                    b.Property<int>("AgencyContactInfoId");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("AgencyContactSocials");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyDiscountCustomerTypeId");

                    b.Property<int>("AgencyId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Note");

                    b.Property<int?>("PickupTypeId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AgencyDiscountCustomerTypeId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("PickupTypeId");

                    b.ToTable("AgencyDeliveries");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyDiscountCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AgencyDiscountCustomerTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyDiscountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AgencyDiscountTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AgencyGroups");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyDiscountTypeId");

                    b.Property<int>("AgencyId");

                    b.Property<int?>("CurrencyTypeId");

                    b.Property<double>("DiscountAmount");

                    b.Property<DateTime?>("EndDate");

                    b.Property<double>("InterestRate");

                    b.Property<int>("InvoiceLimit");

                    b.Property<string>("Note");

                    b.Property<int>("PaymentCredit");

                    b.Property<int>("PaymentLimit");

                    b.Property<int?>("PaymentTermTypeId");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AgencyDiscountTypeId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("PaymentTermTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AgencyPayments");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyRepresentative", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("AgencyId");

                    b.Property<bool>("IsMainContact");

                    b.HasKey("PersonId", "AgencyId");

                    b.HasIndex("AgencyId");

                    b.ToTable("AgencyRepresentatives");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.BankAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("BankAccountTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.BankCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankCardTypeId");

                    b.Property<string>("CardNumber");

                    b.Property<string>("ExpiredDate");

                    b.Property<int>("PersonBankId");

                    b.HasKey("Id");

                    b.HasIndex("BankCardTypeId");

                    b.HasIndex("PersonBankId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.BankCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("BankCardTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.BusinessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<double>("Coefficient");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("BusinessAreas");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CategoryIceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkCategoryId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("CategoryIceOption");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CategoryPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkCategoryId");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PhysicalPath");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("DrinkCategoryPhotos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CategorySugarOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkCategoryId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("CategorySugarOption");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MatchingNames");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CommissionFormula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllCommissionType");

                    b.Property<double>("AllCommissionValue");

                    b.Property<int>("AreaCommissionType");

                    b.Property<double>("AreaCommissionValue");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("NewCusCommissionType");

                    b.Property<double>("NewCusCommissionValue");

                    b.Property<int>("OldCusCommissionType");

                    b.Property<double>("OldCusCommissionValue");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("CommissionFormulas");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactInfoId");

                    b.Property<int?>("DistrictPlaceId");

                    b.Property<DateTime?>("From");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("MoreInfo");

                    b.Property<int?>("NationalityId");

                    b.Property<int?>("ProvinceId");

                    b.Property<DateTime?>("To");

                    b.Property<int?>("TypeId");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("DistrictPlaceId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WardId");

                    b.ToTable("ContactAddresses");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactInfoId");

                    b.Property<string>("Email");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("ContactEmails");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactInfo", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("RelativeInfo");

                    b.HasKey("Id");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactOtt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account");

                    b.Property<int>("ContactInfoId");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("ContactOTTs");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactInfoId");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("ContactPhones");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account");

                    b.Property<int>("ContactInfoId");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("TypeId");

                    b.ToTable("ContactSocials");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ControllerAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName");

                    b.Property<string>("ControllerName");

                    b.Property<string>("Description");

                    b.Property<bool>("IsShow");

                    b.Property<string>("MenuGroup");

                    b.Property<string>("Params");

                    b.Property<string>("Site");

                    b.HasKey("Id");

                    b.ToTable("ControllerActions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ControllerActionPermission", b =>
                {
                    b.Property<int>("ControllerActionId");

                    b.Property<string>("RoleId");

                    b.HasKey("ControllerActionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ControllerActionPermissions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CurrencyTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DeliveryPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPartner");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CompanyId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DepartmentPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentPositions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PushAuth");

                    b.Property<string>("PushEndpoint");

                    b.Property<string>("PushP256DH");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DistrictPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProvinceId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DistrictPlaces");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("DisplayIceOption");

                    b.Property<bool>("DisplaySizeOption");

                    b.Property<bool>("DisplaySugarOption");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCombo");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsNew");

                    b.Property<bool>("IsOpen");

                    b.Property<bool>("IsShared");

                    b.Property<bool>("IsSuggested");

                    b.Property<string>("Name");

                    b.Property<int>("NewOrderSort");

                    b.Property<bool>("OutOfStock");

                    b.Property<DateTime?>("OutOfStockFrom");

                    b.Property<DateTime?>("OutOfStockTo");

                    b.Property<int>("Position");

                    b.Property<int>("Price");

                    b.Property<bool>("Reenter");

                    b.Property<bool>("RequireIceOption");

                    b.Property<bool>("RequireSizeOption");

                    b.Property<bool>("RequireSugarOption");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<int>("Position");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("DrinkCategories");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkCategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DrinkCategoryTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkId");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PhysicalPath");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.ToTable("DrinkPhotos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPrimary");

                    b.Property<bool>("IsShowOrder");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("Price");

                    b.Property<float>("Quota");

                    b.Property<int?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UnitId");

                    b.ToTable("DrinkSizes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkTopping", b =>
                {
                    b.Property<int>("DrinkId");

                    b.Property<int>("ToppingId");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("PriceForExtra");

                    b.Property<int>("PriceForSale");

                    b.HasKey("DrinkId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.ToTable("DrinkToppings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkToppingCategory", b =>
                {
                    b.Property<int>("DrinkId");

                    b.Property<int>("ToppingCategoryId");

                    b.Property<int?>("Max");

                    b.Property<int?>("Min");

                    b.HasKey("DrinkId", "ToppingCategoryId");

                    b.HasIndex("ToppingCategoryId");

                    b.ToTable("DrinkToppingCategories");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DrinkUnits");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("EmailTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Ethnic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Ethnics");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.FreeDrinkReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FreeDrinkReasons");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.IceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPrimary");

                    b.Property<bool>("IsShowOrder");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<float>("Quota");

                    b.Property<int?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UnitId");

                    b.ToTable("IceOptions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.IDCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpriredDate");

                    b.Property<string>("IDNumber");

                    b.Property<int>("PersonId");

                    b.Property<string>("ProvidedDate");

                    b.Property<string>("ProvidedPlace");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("IDCards");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.IDDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpriredDate");

                    b.Property<int?>("IDDocumentTypeId");

                    b.Property<string>("IDNumber");

                    b.Property<int>("PersonId");

                    b.Property<string>("ProvidedDate");

                    b.Property<string>("ProvidedPlace");

                    b.HasKey("Id");

                    b.HasIndex("IDDocumentTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("IDDocuments");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.IDDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("IDDocumentTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("From");

                    b.Property<bool>("IsCurrent");

                    b.Property<int>("PersonId");

                    b.Property<DateTime?>("To");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.MaritalStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatusTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.NotifyPopup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAllowOrder");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("NotifyPopups");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine")
                        .HasMaxLength(100);

                    b.Property<int?>("AgencyId");

                    b.Property<int>("BaseDrinkCount");

                    b.Property<string>("CardCode")
                        .HasMaxLength(50);

                    b.Property<string>("Code");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("CustomerNote");

                    b.Property<int>("DiscountAmount");

                    b.Property<int>("DiscountDrinkCount");

                    b.Property<int>("Distance");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeName");

                    b.Property<string>("EmployeeNote");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int>("FreeDrinkCount");

                    b.Property<bool>("IsAutoDiscount");

                    b.Property<bool>("IsAutoShipFee");

                    b.Property<bool>("IsAutoSurcharge");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDeliveryNow");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<int>("OrderCustomerType");

                    b.Property<DateTime>("OrderDeliveried");

                    b.Property<DateTime>("OrderPlaced");

                    b.Property<int?>("OrderSourceId");

                    b.Property<int>("OrderTotal");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<string>("PromotionCode");

                    b.Property<int>("PromotionDiscountType");

                    b.Property<int>("PromotionDiscountValue");

                    b.Property<int>("ShipFee");

                    b.Property<string>("SocialNetwork");

                    b.Property<int>("Status");

                    b.Property<string>("StatusNote");

                    b.Property<int>("SurchargeAmount");

                    b.HasKey("OrderId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("OrderSourceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderDelivery", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<DateTime?>("AcceptedTime");

                    b.Property<string>("Address");

                    b.Property<DateTime?>("BeginTime");

                    b.Property<int?>("DeliveryPartnerId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("FullName");

                    b.Property<string>("Note");

                    b.Property<int>("Partner");

                    b.Property<float>("PartnerDistance");

                    b.Property<int>("PartnerShipFee");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryPartnerId");

                    b.ToTable("OrderDeliveries");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DiscountMoneyValue");

                    b.Property<int>("DiscountPercentValue");

                    b.Property<string>("DiscountReason");

                    b.Property<int>("DiscountType");

                    b.Property<int>("DrinkId");

                    b.Property<string>("DrinkName");

                    b.Property<string>("DrinkSize");

                    b.Property<int>("DrinkSizeId");

                    b.Property<int?>("FreeDrinkReasonId");

                    b.Property<int>("FullPrice");

                    b.Property<string>("IceOption");

                    b.Property<bool>("IsFreeDrink");

                    b.Property<bool>("IsNewDrink");

                    b.Property<bool>("IsPromoDiscount");

                    b.Property<string>("Note");

                    b.Property<int>("OrderId");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.Property<string>("SugarOption");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("FreeDrinkReasonId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderDetailTopping", b =>
                {
                    b.Property<int>("OrderDetailId");

                    b.Property<int>("ToppingId");

                    b.Property<int>("Amount");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.Property<string>("ToppingName");

                    b.HasKey("OrderDetailId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.ToTable("OrderDetailToppings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("OrderSourceTypeId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("OrderSourceTypeId");

                    b.ToTable("OrderSource");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("OrderSourceType");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OttType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("OTTTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpriredDate");

                    b.Property<string>("IDNumber");

                    b.Property<int>("PersonId");

                    b.Property<string>("ProvidedDate");

                    b.Property<string>("ProvidedPlace");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PaymentTermType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PaymentTermTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyId");

                    b.Property<string>("Code");

                    b.Property<int?>("CustomerSourceCusId");

                    b.Property<int?>("CustomerSourceEmpId");

                    b.Property<string>("CustomerSourceNote");

                    b.Property<int?>("EthnicId");

                    b.Property<int>("GenderId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("PersonCustomerSourceTypeId");

                    b.Property<int?>("PersonLevelId");

                    b.Property<int>("PersonType");

                    b.Property<string>("PrimaryDOB");

                    b.Property<string>("PrimaryName");

                    b.Property<string>("PrimaryPhoto");

                    b.Property<int?>("ReligionId");

                    b.Property<int?>("SocialTypeId");

                    b.Property<int>("TitlePrefixType");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CustomerSourceCusId")
                        .IsUnique()
                        .HasFilter("[CustomerSourceCusId] IS NOT NULL");

                    b.HasIndex("CustomerSourceEmpId");

                    b.HasIndex("EthnicId");

                    b.HasIndex("PersonCustomerSourceTypeId");

                    b.HasIndex("PersonLevelId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SocialTypeId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalDob", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("TypeId");

                    b.Property<int>("Day");

                    b.Property<int>("Month");

                    b.Property<int>("Year");

                    b.HasKey("PersonId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("PersonalDOBs");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalDobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PersonalDOBTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalHomeTown", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<string>("Country");

                    b.Property<string>("District");

                    b.Property<string>("MoreInfo");

                    b.Property<string>("Province");

                    b.Property<string>("Ward");

                    b.HasKey("PersonId");

                    b.ToTable("PersonalHomeTowns");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("From");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("LastName");

                    b.Property<string>("MidName");

                    b.Property<int>("PersonId");

                    b.Property<DateTime?>("To");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("PersonalNames");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalNameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PersonalNameTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalNationality", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("NationalityId");

                    b.Property<string>("From");

                    b.Property<string>("To");

                    b.HasKey("PersonId", "NationalityId");

                    b.HasIndex("NationalityId");

                    b.ToTable("PersonalNationality");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("PersonId");

                    b.Property<int>("TypeId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("PersonalPhotos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalPhotoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PersonalPhotoTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalPob", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<string>("Country");

                    b.Property<string>("District");

                    b.Property<string>("MoreInfo");

                    b.Property<string>("Province");

                    b.Property<string>("Ward");

                    b.HasKey("PersonId");

                    b.ToTable("PersonalPOBs");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNumber");

                    b.Property<int?>("BankAccountTypeId");

                    b.Property<string>("BankBranch");

                    b.Property<string>("BankName");

                    b.Property<int>("PersonId");

                    b.Property<string>("SwiftCode");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonBanks");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonCustomerCare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("PersonId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCustomerCares");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonCustomerSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PersonCustomerSourceTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonCustomerWorking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company");

                    b.Property<string>("Department");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsMainPosition");

                    b.Property<bool>("IsWorking");

                    b.Property<int>("PersonId");

                    b.Property<string>("Position");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCustomerWorkings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonEmployeeWorking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId");

                    b.Property<int>("DepartmentPositionId");

                    b.Property<bool>("IsMainPosition");

                    b.Property<bool>("IsWorking");

                    b.Property<int>("PersonId");

                    b.Property<DateTime?>("PositionBeginDate");

                    b.Property<DateTime?>("PositionEndDate");

                    b.Property<DateTime?>("TrialWorkBeginDate");

                    b.Property<DateTime?>("WorkBeginDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentPositionId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEmployeeWorkings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Points");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("PersonLevels");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PickupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PickupTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplyFor");

                    b.Property<int>("ApplyRule");

                    b.Property<int>("ApplyTimeType");

                    b.Property<bool>("ApplyWithOther");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("DiscountType");

                    b.Property<int>("DiscountValue");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PrivatePromotions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CodeComment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CurrentUseCode");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInfinityTime");

                    b.Property<bool>("IsInfinityUse");

                    b.Property<int>("MaxUseCode");

                    b.Property<int>("PrivatePromotionId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PrivatePromotionId");

                    b.ToTable("PrivatePromotionCodes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionDrink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkId");

                    b.Property<int>("DrinkSizeId");

                    b.Property<string>("DrinkSizeName");

                    b.Property<int>("PrivatePromotionId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("PrivatePromotionId");

                    b.ToTable("PrivatePromotionDrinks");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionDrinkSetting", b =>
                {
                    b.Property<int>("PrivatePromotionId");

                    b.Property<bool>("ApplyOneTimeOrRepeat");

                    b.Property<bool>("Condition_MinDrink");

                    b.Property<int>("Condition_MinDrinkValue");

                    b.Property<bool>("Condition_MinMoney");

                    b.Property<int>("Condition_MinMoneyValue");

                    b.Property<bool>("Condition_Topping");

                    b.Property<bool>("Condition_WithTopping");

                    b.Property<int>("PromotionDrinkBuyQuantity");

                    b.Property<int>("PromotionDrinkGiveQuantity");

                    b.Property<int>("PromotionDrinkQuantity");

                    b.Property<bool>("PromotionDrinkRandom");

                    b.Property<bool>("PromotionForm");

                    b.Property<int>("PromotionGiftType");

                    b.HasKey("PrivatePromotionId");

                    b.ToTable("PrivatePromotionDrinkSettings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionDrinkTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrivatePromotionDrinkId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ToppingId");

                    b.HasKey("Id");

                    b.HasIndex("PrivatePromotionDrinkId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PrivatePromotionDrinkToppings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PhysicalPath");

                    b.Property<int>("PrivatePromotionId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("PrivatePromotionId");

                    b.ToTable("PrivatePromotionPhotos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplyDayOfWeek");

                    b.Property<int>("ApplyFor");

                    b.Property<DateTime?>("ApplyFromDate");

                    b.Property<int>("ApplyRule");

                    b.Property<int>("ApplyTimeType");

                    b.Property<DateTime?>("ApplyToDate");

                    b.Property<bool>("ApplyWithOther");

                    b.Property<bool>("AutoPromotion");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("DiscountType");

                    b.Property<int>("DiscountValue");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("PromotionCode");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionApplyHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("From");

                    b.Property<int>("PromotionId");

                    b.Property<TimeSpan>("To");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionApplyHours");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionDrink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkId");

                    b.Property<int>("DrinkSizeId");

                    b.Property<string>("DrinkSizeName");

                    b.Property<int>("PromotionId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionDrinks");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionDrinkSetting", b =>
                {
                    b.Property<int>("PromotionId");

                    b.Property<bool>("ApplyOneTimeOrRepeat");

                    b.Property<bool>("Condition_MinDrink");

                    b.Property<int>("Condition_MinDrinkValue");

                    b.Property<bool>("Condition_MinMoney");

                    b.Property<int>("Condition_MinMoneyValue");

                    b.Property<bool>("Condition_Topping");

                    b.Property<bool>("Condition_WithTopping");

                    b.Property<int>("PromotionDrinkBuyQuantity");

                    b.Property<int>("PromotionDrinkGiveQuantity");

                    b.Property<int>("PromotionDrinkQuantity");

                    b.Property<bool>("PromotionDrinkRandom");

                    b.Property<bool>("PromotionForm");

                    b.Property<int>("PromotionGiftType");

                    b.HasKey("PromotionId");

                    b.ToTable("PromotionDrinkSettings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionDrinkTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PromotionDrinkId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ToppingId");

                    b.HasKey("Id");

                    b.HasIndex("PromotionDrinkId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PromotionDrinkToppings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PhysicalPath");

                    b.Property<int>("PromotionId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionPhotos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int?>("DrinkId");

                    b.Property<string>("ShoppingCartId");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("DrinkId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.SocialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SocialTypes");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.SugarOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrinkId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPrimary");

                    b.Property<bool>("IsShowOrder");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<float>("Quota");

                    b.Property<int?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UnitId");

                    b.ToTable("SugarOptions");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsShared");

                    b.Property<string>("Name");

                    b.Property<string>("OtherName");

                    b.Property<bool>("OutOfStock");

                    b.Property<DateTime?>("OutOfStockFrom");

                    b.Property<DateTime?>("OutOfStockTo");

                    b.Property<int>("Position");

                    b.Property<int>("Price");

                    b.Property<int>("QuickCreateIndex");

                    b.Property<int>("Quota");

                    b.Property<int?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Toppings");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ToppingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<int>("Position");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ToppingCategories");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ToppingPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PhysicalPath");

                    b.Property<int>("ToppingId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ToppingId");

                    b.ToTable("ToppingPhotos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.VehicleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CylinderCapacity");

                    b.Property<string>("FrameCode");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("MachineCode");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("Owner");

                    b.Property<int>("PersonId");

                    b.Property<string>("Status");

                    b.Property<string>("VehicleType");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("VehicleInfos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.VehiclePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Url");

                    b.Property<int>("VehicleInfoId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInfoId");

                    b.ToTable("VehiclePhotos");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictPlaceId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DistrictPlaceId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Agency", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyBusiness", "AgencyBusiness")
                        .WithMany()
                        .HasForeignKey("AgencyBusinessId");

                    b.HasOne("NinjaSaiGon.Data.Models.AgencyGroup", "AgencyGroup")
                        .WithMany()
                        .HasForeignKey("AgencyGroupId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyBank", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithMany("AgencyBanks")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.BankAccountType", "BankAccountType")
                        .WithMany()
                        .HasForeignKey("BankAccountTypeId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyBankCard", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyBank", "AgencyBank")
                        .WithMany("AgencyBankCards")
                        .HasForeignKey("AgencyBankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.BankCardType", "BankCardType")
                        .WithMany()
                        .HasForeignKey("BankCardTypeId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyCare", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithMany("AgencyCares")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactAddress", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyContactInfo", "ContactInfo")
                        .WithMany("Addresses")
                        .HasForeignKey("AgencyContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.DistrictPlace", "DistrictPlace")
                        .WithMany()
                        .HasForeignKey("DistrictPlaceId");

                    b.HasOne("NinjaSaiGon.Data.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("NinjaSaiGon.Data.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("NinjaSaiGon.Data.Models.AddressType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactEmail", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyContactInfo", "ContactInfo")
                        .WithMany("Emails")
                        .HasForeignKey("AgencyContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.EmailType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactInfo", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithOne("AgencyContactInfo")
                        .HasForeignKey("NinjaSaiGon.Data.Models.AgencyContactInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactOtt", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyContactInfo", "ContactInfo")
                        .WithMany("OTTs")
                        .HasForeignKey("AgencyContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.OttType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactPhone", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyContactInfo", "ContactInfo")
                        .WithMany("Phones")
                        .HasForeignKey("AgencyContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PhoneType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyContactSocial", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyContactInfo", "ContactInfo")
                        .WithMany("Socials")
                        .HasForeignKey("AgencyContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.SocialType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyDelivery", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyDiscountCustomerType", "AgencyDiscountCustomerType")
                        .WithMany()
                        .HasForeignKey("AgencyDiscountCustomerTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithMany("AgencyDeliveries")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PickupType", "PickupType")
                        .WithMany()
                        .HasForeignKey("PickupTypeId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyPayment", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.AgencyDiscountType", "AgencyDiscountType")
                        .WithMany()
                        .HasForeignKey("AgencyDiscountTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithMany("AgencyPayments")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.CurrencyType", "CurrencyType")
                        .WithMany()
                        .HasForeignKey("CurrencyTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.PaymentTermType", "PaymentTermType")
                        .WithMany()
                        .HasForeignKey("PaymentTermTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.AgencyRepresentative", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithMany("AgencyRepresentatives")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("NinjaSaiGon.Data.Models.ApplicationUser", "PersonId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.BankCard", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.BankCardType", "BankCardType")
                        .WithMany()
                        .HasForeignKey("BankCardTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.PersonBank", "PersonBank")
                        .WithMany("BankCards")
                        .HasForeignKey("PersonBankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.BusinessArea", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.BusinessArea", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CategoryIceOption", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.DrinkCategory", "DrinkCategory")
                        .WithMany("CategoryIceOptions")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CategoryPhoto", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.DrinkCategory", "DrinkCategory")
                        .WithMany("Photos")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.CategorySugarOption", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.DrinkCategory", "DrinkCategory")
                        .WithMany("CategorySugarOptions")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactAddress", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ContactInfo", "ContactInfo")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.DistrictPlace", "DistrictPlace")
                        .WithMany()
                        .HasForeignKey("DistrictPlaceId");

                    b.HasOne("NinjaSaiGon.Data.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("NinjaSaiGon.Data.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("NinjaSaiGon.Data.Models.AddressType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactEmail", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ContactInfo", "ContactInfo")
                        .WithMany("Emails")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.EmailType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactInfo", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithOne("ContactInfo")
                        .HasForeignKey("NinjaSaiGon.Data.Models.ContactInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactOtt", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ContactInfo", "ContactInfo")
                        .WithMany("OTTs")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.OttType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactPhone", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ContactInfo", "ContactInfo")
                        .WithMany("Phones")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PhoneType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ContactSocial", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ContactInfo", "ContactInfo")
                        .WithMany("Socials")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.SocialType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ControllerActionPermission", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ControllerAction", "ControllerAction")
                        .WithMany("Permissions")
                        .HasForeignKey("ControllerActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Department", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DepartmentPosition", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Department", "Department")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.District", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DistrictPlace", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Drink", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.DrinkCategory", "Category")
                        .WithMany("Drinks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkCategory", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.DrinkCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("NinjaSaiGon.Data.Models.DrinkCategoryType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkPhoto", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany("Photos")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkSize", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany("DrinkSizes")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.DrinkUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkTopping", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany("DrinkToppings")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Topping", "Topping")
                        .WithMany("DrinkToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.DrinkToppingCategory", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany("DrinkToppingCategories")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.ToppingCategory", "ToppingCategory")
                        .WithMany("DrinkToppingCategories")
                        .HasForeignKey("ToppingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.IceOption", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany("IceOptions")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.DrinkUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.IDCard", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("IDCards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.IDDocument", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.IDDocumentType", "IDDocumentType")
                        .WithMany()
                        .HasForeignKey("IDDocumentTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("IDDocuments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.MaritalStatus", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("MaritalStatuses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.MaritalStatusType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Order", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("NinjaSaiGon.Data.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("NinjaSaiGon.Data.Models.OrderSource", "OrderSource")
                        .WithMany()
                        .HasForeignKey("OrderSourceId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderDelivery", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.DeliveryPartner", "DeliveryPartner")
                        .WithMany()
                        .HasForeignKey("DeliveryPartnerId");

                    b.HasOne("NinjaSaiGon.Data.Models.Order", "Order")
                        .WithOne("OrderDelivery")
                        .HasForeignKey("NinjaSaiGon.Data.Models.OrderDelivery", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderDetail", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.FreeDrinkReason", "FreeDrinkReason")
                        .WithMany()
                        .HasForeignKey("FreeDrinkReasonId");

                    b.HasOne("NinjaSaiGon.Data.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderDetailTopping", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.OrderDetail", "OrderDetail")
                        .WithMany("OrderDetailToppings")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Topping")
                        .WithMany("OrderDetailToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.OrderSource", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.OrderSourceType", "OrderSourceType")
                        .WithMany("OrderSources")
                        .HasForeignKey("OrderSourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Passport", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("Passports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Person", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "CustomerSourceCus")
                        .WithOne()
                        .HasForeignKey("NinjaSaiGon.Data.Models.Person", "CustomerSourceCusId");

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "CustomerSourceEmp")
                        .WithMany()
                        .HasForeignKey("CustomerSourceEmpId");

                    b.HasOne("NinjaSaiGon.Data.Models.Ethnic", "Ethnic")
                        .WithMany()
                        .HasForeignKey("EthnicId");

                    b.HasOne("NinjaSaiGon.Data.Models.PersonCustomerSourceType", "PersonCustomerSourceType")
                        .WithMany()
                        .HasForeignKey("PersonCustomerSourceTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.PersonLevel", "PersonLevel")
                        .WithMany()
                        .HasForeignKey("PersonLevelId");

                    b.HasOne("NinjaSaiGon.Data.Models.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("NinjaSaiGon.Data.Models.SocialType", "SocialType")
                        .WithMany()
                        .HasForeignKey("SocialTypeId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalDob", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("DOBs")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PersonalDobType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalHomeTown", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithOne("HomeTown")
                        .HasForeignKey("NinjaSaiGon.Data.Models.PersonalHomeTown", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalName", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("Names")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PersonalNameType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalNationality", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("Nationalities")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalPhoto", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("Photos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PersonalPhotoType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonalPob", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithOne("POB")
                        .HasForeignKey("NinjaSaiGon.Data.Models.PersonalPob", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonBank", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.BankAccountType", "BankAccountType")
                        .WithMany()
                        .HasForeignKey("BankAccountTypeId");

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("PersonBanks")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonCustomerCare", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Employee")
                        .WithMany("EmployeeCares")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("CustomerRepresentativeCares")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonCustomerWorking", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("PersonCustomerWorkings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PersonEmployeeWorking", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.DepartmentPosition", "DepartmentPosition")
                        .WithMany()
                        .HasForeignKey("DepartmentPositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("PersonEmployeeWorkings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionCode", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.PrivatePromotion", "PrivatePromotion")
                        .WithMany("PrivatePromotionCodes")
                        .HasForeignKey("PrivatePromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionDrink", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PrivatePromotionDrinkSetting", "PrivatePromotionDrinkSetting")
                        .WithMany("PrivatePromotionDrinks")
                        .HasForeignKey("PrivatePromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionDrinkSetting", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.PrivatePromotion", "PrivatePromotion")
                        .WithOne("PrivatePromotionDrinkSetting")
                        .HasForeignKey("NinjaSaiGon.Data.Models.PrivatePromotionDrinkSetting", "PrivatePromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionDrinkTopping", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.PrivatePromotionDrink", "PrivatePromotionDrink")
                        .WithMany("PrivatePromotionDrinkToppings")
                        .HasForeignKey("PrivatePromotionDrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PrivatePromotionPhoto", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.PrivatePromotion", "PrivatePromotion")
                        .WithMany("Photos")
                        .HasForeignKey("PrivatePromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionApplyHour", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Promotion", "Promotion")
                        .WithMany("ApplyHours")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionDrink", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.PromotionDrinkSetting", "PromotionDrinkSetting")
                        .WithMany("PromotionDrinks")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionDrinkSetting", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Promotion", "Promotion")
                        .WithOne("PromotionDrinkSetting")
                        .HasForeignKey("NinjaSaiGon.Data.Models.PromotionDrinkSetting", "PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionDrinkTopping", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.PromotionDrink", "PromotionDrink")
                        .WithMany("PromotionDrinkToppings")
                        .HasForeignKey("PromotionDrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.PromotionPhoto", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Promotion", "Promotion")
                        .WithMany("Photos")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.SugarOption", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Drink", "Drink")
                        .WithMany("SugarOptions")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.DrinkUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Topping", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ToppingCategory", "Category")
                        .WithMany("Toppings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NinjaSaiGon.Data.Models.DrinkUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ToppingCategory", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.ToppingCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.ToppingPhoto", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Topping", "Topping")
                        .WithMany("Photos")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.VehicleInfo", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.Person", "Person")
                        .WithMany("Vehicles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.VehiclePhoto", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.VehicleInfo", "VehicleInfo")
                        .WithMany("Photos")
                        .HasForeignKey("VehicleInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaSaiGon.Data.Models.Ward", b =>
                {
                    b.HasOne("NinjaSaiGon.Data.Models.DistrictPlace", "DistrictPlace")
                        .WithMany()
                        .HasForeignKey("DistrictPlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
